---
script:
  is_user_home_determiner:
    alias: Is User Home Determiner
    description: Control input_boolean.user_X_home
    mode: parallel
    fields:
      person:
        description: The person to track
        example: person.kevin
      mobile_app:
        description: The mobile app to send the location request to
        example: notify.mobile_app_sm_g975f
      input_boolean:
        description: The input_boolean to turn on
        example: input_boolean.user_one_home
    sequence:
      - choose:
          # User just got home
          - conditions:
              - condition: template
                value_template: >
                  {{ is_state(person, 'home') 
                  and (as_timestamp(now()) - as_timestamp(states[person].last_changed)) < 600 }}
            sequence:
              - service: input_boolean.turn_on
                data:
                  entity_id: "{{ input_boolean }}"
        default:
          # User is not yet/still home
          - variables:
              current_state: "{{ states(person) }}"
          - service: "{{ mobile_app }}"
            data:
              message: "request_location_update"
          # Wait until the state changes
          - wait_for_trigger:
              - platform: template
                value_template: "{{ not is_state(person, current_state) }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ is_state(person, 'home') }}"
                sequence:
                  - service: input_boolean.turn_on
                    data:
                      entity_id: "{{ input_boolean }}"
              - conditions:
                  - condition: template
                    # User changed to anything but home. So 'not_home' or a zone name
                    value_template: "{{ not is_state(person, 'home') }}"
                sequence:
                  - service: input_boolean.turn_off
                    data:
                      entity_id: "{{ input_boolean }}"
automation:
  - id: 602560d6-f0f2-4692-acf1-a88b116a2ffb
    alias: Is User Home Determiner
    description: Trigger script.is_user_home_determiner
    mode: single
    trigger:
      platform: state
      entity_id: binary_sensor.contact_door
      to: "on"
    action:
      - service: script.turn_on
        entity_id: script.is_user_home_determiner
        data:
          variables:
            person: person.kevin
            mobile_app: notify.mobile_app_sm_g975f
            input_boolean: input_boolean.user_one_home
      - service: script.turn_on
        entity_id: script.is_user_home_determiner
        data:
          variables:
            person: person.sina
            mobile_app: notify.mobile_app_oneplus_a3003
            input_boolean: input_boolean.user_two_home

  - id: 4f8dd19f-0d78-4614-bce1-77fd7bc31214
    alias: Is Home Determiner
    description: Control input_boolean.is_home
    mode: queued
    trigger:
      platform: state
      entity_id:
        - input_boolean.user_one_home
        - input_boolean.user_two_home
    action:
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ trigger.to_state.state == 'on' }}"
            sequence:
              - service: input_boolean.turn_on
                entity_id: input_boolean.is_home
        default:
          - condition: and
            conditions:
              - condition: state
                entity_id:
                  - input_boolean.user_one_home
                  - input_boolean.user_two_home
                state: "off"
          - service: input_boolean.turn_off
            entity_id: input_boolean.is_home
          - service: notify.group_notifications
            data:
              message: >
                {{ [
                "Es ist keiner mehr zu Hause.",
                "Keiner mehr da? Panda Party!",
                "Ich passe auf die Wohnung auf, einen schönen Tag",
                "Tschüss, bis nachher"
                ] | random }}

  - id: 02241047-0872-433f-9d88-df451479ec1a
    alias: Notification wenn Türen und Fenster noch offen ist wenn wir weg gehen
    description: Notification when we forgot to close doors or windwos when leaving
    mode: single
    trigger:
      platform: state
      entity_id: input_boolean.is_home
      to: "off"
    condition:
      condition: template
      value_template: >
        {% set ns = namespace(open_doors="") %}
        {% for state in states %}
            {% if state.entity_id.startswith("binary_sensor.contact") %}
                {% if ns.open_doors == "" %}
                    {% set ns.open_doors = ns.open_doors + state.entity_id %}
                {% else %}
                    {% set ns.open_doors = ns.open_doors + "," + state.entity_id %}
                {% endif %}
            {% endif %}
        {% endfor %}
        {% set open_doors_list = ns.open_doors.split(",") %}
        {{ states | selectattr('entity_id', 'in', open_doors_list)
          | selectattr('state', 'eq', 'on') | list | count > 0 }}
    action:
      - service: notify.group_notifications
        data:
          message: >
            {% set ns = namespace(open_doors="") %}
            {% for state in states %}
                {% if state.entity_id.startswith("binary_sensor.contact") %}
                    {% if ns.open_doors == "" %}
                        {% set ns.open_doors = ns.open_doors + state.entity_id %}
                    {% else %}
                        {% set ns.open_doors = ns.open_doors + "," + state.entity_id %}
                    {% endif %}
                {% endif %}
            {% endfor %}
            {% set open_doors_list = ns.open_doors.split(",") %}
            Du hast vergessen
            {{ states | selectattr('entity_id', 'in', open_doors_list) | selectattr('state', 'eq', 'on')
              | map(attribute='attributes') | map(attribute='friendly_name') | list | join(', ') }}
            zu schließen!
  - id: 65549e31-0f06-470d-93ef-718e9fb53da9
    alias: Licht an wenn der erste nach Sonnenuntergang nach Hause kommt
    description: Turn on lamp when the first person gets home after sundown
    mode: single
    trigger:
      - platform: state
        entity_id: binary_sensor.contact_door
        to: "on"
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: sun.sun
          state: "below_horizon"
        - condition: or
          conditions:
            - condition: state
              entity_id: input_boolean.is_home
              state: "off"
            - condition: template
              value_template: >
                {{ as_timestamp(now()) - (as_timestamp(states.input_boolean.is_home.last_changed)) < 2 }}
    action:
      - service: switch.turn_on
        entity_id: switch.large_lamp
  - id: 36f4528f-5992-4e7f-a9b7-87adfd6b137b
    alias: Willkommen zu Hause
    description: Welcome Home
    mode: queued
    trigger:
      - platform: state
        entity_id:
          - input_boolean.user_one_home
          - input_boolean.user_two_home
    condition:
      - condition: state
        entity_id: input_boolean.notifier_alexa
        state: "on"
      - condition: template
        value_template: "{{ trigger.from_state.state == 'off' and trigger.to_state.state == 'on' }}"
    action:
      - service: notify.alexa_media_kevins_echo_dot_wohnzimmer
        data:
          data:
            type: announce
            method: speak
          message: >
            {% if trigger.entity_id == "input_boolean.user_one_home" %}
              {% set name = "Kevin" %}
            {% elif trigger.entity_id == "input_boolean.user_two_home" %}
              {% set name = "Sina" %}
            {% endif %}
            Willkommen zu Hause {{ name }}

homeassistant:
  customize:
    automation.notification_wenn_turen_und_fenster_noch_offen_ist_wenn_wir_weg_gehen:
      icon: mdi:alert
    automation.licht_an_wenn_der_erste_nach_sonnenuntergang_nach_hause_kommt:
      icon: mdi:lightbulb
    automation.willkommen_zu_hause:
      icon: mdi:home-account
